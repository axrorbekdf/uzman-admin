import{u as y,_ as h}from"./sCN19T05.js";import{_ as f}from"./CMuuHvFw.js";import{L as g,h as _,K as F,I as i,o as l,x as S,c as b,b as k}from"./qNHidORN.js";import{C as v}from"./BbxQWPrL.js";import{u as a}from"./CkKw5vfm.js";import"./BtQSNnrc.js";import"./CNBYn2MZ.js";import"./Cw8eE_2A.js";import"./BN34Dwmq.js";const s={index(e){return a()("specialist/index",{method:"GET",params:e})},forOptions(){return a()("specialist/for/options",{method:"GET"})},view(e){return a()(`specialist/view/${e}`,{method:"GET"})},store(e){return a()("specialist/store",{method:"POST",body:e})},update(e,t){return a()(`specialist/update/${e}`,{method:"PUT",body:t})},delete(e){return a()(`specialist/delete/${e}`,{method:"DELETE"})}},L=g("specialist",{state:()=>({specialist:null,specialists:[],model:{modelForForm:{entity:{id:void 0,name:void 0,category_id:void 0},relations:{categories:[]},viewEntity:{id:{name:"ID",type:"number"},name:{name:"Nomi",type:"string"},category:{name:"Category",type:"object",relation:"name"}},formTemplate:[{label:"Category nomi",name:"name",relation:null},{label:"Category",name:"category_id",relation:{name:"categories",value:"id",options:"name"}}],rules:{name:{rule:"required",message:"To'ldirilishi kerak"},category_id:{rule:"required",message:"To'ldirilishi kerak"}}},columns:[{key:"id",label:"ID",sortable:!0},{key:"name",label:"Name",sortable:!0},{key:"category.name",label:"Category",sortable:!0},{key:"date",label:"Sana",sortable:!0},{key:"actions"}]}}),getters:{specialist:e=>e.specialist,getList:e=>e.specialists},actions:{async getAllList(){try{s.forOptions().then(e=>{this.specialists=e.resoult.data}).catch(e=>{console.error("Failed to load posts:",e)})}catch(e){console.error("Failed to load posts:",e)}},async getAllCategories(){try{v.forOptions().then(e=>{this.model.modelForForm.relations.categories=e.resoult.data}).catch(e=>{console.error("Failed to load posts:",e)})}catch(e){console.error("Failed to load posts:",e)}},async createSpecialist(e){try{s.store(e).then(t=>{this.getAllList()}).catch(t=>{console.error("Failed to load posts:",t)})}catch(t){console.error("Failed to load posts:",t)}},async updateSpecialist(e,t){try{s.update(e,t).then(o=>{this.getAllList()}).catch(o=>{console.error("Failed to load posts:",o)})}catch(o){console.error("Failed to load posts:",o)}},async deleteSpecialist(e){try{s.delete(e).then(t=>{this.getAllList()}).catch(t=>{console.error("Failed to load posts:",t)})}catch(t){console.error("Failed to load posts:",t)}}}}),C={key:1},I=_({__name:"index",setup(e){const t=y(),o=L();F(async()=>{o.getAllList(),o.getAllCategories()});function n(){o.model.modelForForm.entity={id:void 0,name:void 0,category_id:void 0}}function c(){t.set(!0),o.createSpecialist(o.model.modelForForm.entity).then(r=>{t.set(!1)}).catch(()=>{t.set(!1)}).finally(()=>{t.set(!1)})}function d(){t.set(!0),o.updateSpecialist(o.model.modelForForm.entity.id??0,o.model.modelForForm.entity).then(r=>{t.set(!1)}).catch(()=>{t.set(!1)}).finally(()=>{t.set(!1)})}function m(){t.set(!0),o.deleteSpecialist(o.model.modelForForm.entity.id??0).then(r=>{t.set(!1)}).catch(()=>{t.set(!1)}).finally(()=>{t.set(!1)})}return(r,E)=>{const p=h,u=f;return i(t).isLoading?(l(),S(p,{key:0})):(l(),b("div",C,[k(u,{data:i(o).getList,model:i(o).model,"clear-entity":n,"create-model":c,"update-model":d,"delete-model":m},null,8,["data","model"])]))}}});export{I as default};
